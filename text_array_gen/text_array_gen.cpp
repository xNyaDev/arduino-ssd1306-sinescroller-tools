// MIT License
//
// Copyright (c) 2021 xNyaDev
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#include <iostream>
#include <string>

using std::cin;
using std::cout;
using std::endl;
using std::getline;
using std::hex;
using std::string;

// This is the array which holds the character set.
// Generated with http://javl.github.io/image2cpp/ - Vertical, 1 bit per pixel.
const int kModifiedCommodore64Font[768] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x4f, 0x4f, 0x00, 0x00, 0x00,
    0x00, 0x07, 0x07, 0x00, 0x00, 0x07, 0x07, 0x00,
    0x14, 0x7f, 0x7f, 0x14, 0x14, 0x7f, 0x7f, 0x14,
    0x00, 0x24, 0x2e, 0x6b, 0x6b, 0x3a, 0x12, 0x00,
    0x00, 0x63, 0x33, 0x18, 0x0c, 0x66, 0x63, 0x00,
    0x00, 0x32, 0x7f, 0x4d, 0x4d, 0x77, 0x72, 0x50,
    0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x1c, 0x3e, 0x63, 0x41, 0x00, 0x00,
    0x00, 0x00, 0x41, 0x63, 0x3e, 0x1c, 0x00, 0x00,
    0x08, 0x2a, 0x3e, 0x1c, 0x1c, 0x3e, 0x2a, 0x08,
    0x00, 0x08, 0x08, 0x3e, 0x3e, 0x08, 0x08, 0x00,
    0x00, 0x00, 0x80, 0xe0, 0x60, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00,
    0x00, 0x00, 0x00, 0x60, 0x60, 0x00, 0x00, 0x00,
    0x00, 0x40, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02,
    0x00, 0x3e, 0x7f, 0x49, 0x45, 0x7f, 0x3e, 0x00,
    0x00, 0x40, 0x44, 0x7f, 0x7f, 0x40, 0x40, 0x00,
    0x00, 0x62, 0x73, 0x51, 0x49, 0x4f, 0x46, 0x00,
    0x00, 0x22, 0x63, 0x49, 0x49, 0x7f, 0x36, 0x00,
    0x00, 0x18, 0x18, 0x14, 0x16, 0x7f, 0x7f, 0x10,
    0x00, 0x27, 0x67, 0x45, 0x45, 0x7d, 0x39, 0x00,
    0x00, 0x3e, 0x7f, 0x49, 0x49, 0x7b, 0x32, 0x00,
    0x00, 0x03, 0x03, 0x79, 0x7d, 0x07, 0x03, 0x00,
    0x00, 0x36, 0x7f, 0x49, 0x49, 0x7f, 0x36, 0x00,
    0x00, 0x26, 0x6f, 0x49, 0x49, 0x7f, 0x3e, 0x00,
    0x00, 0x00, 0x00, 0x24, 0x24, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x80, 0xe4, 0x64, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x1c, 0x36, 0x63, 0x41, 0x41, 0x00,
    0x00, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x00,
    0x00, 0x41, 0x41, 0x63, 0x36, 0x1c, 0x08, 0x00,
    0x00, 0x02, 0x03, 0x51, 0x59, 0x0f, 0x06, 0x00,
    0x00, 0x3e, 0x7f, 0x41, 0x4d, 0x6f, 0x2e, 0x00,
    0x00, 0x7c, 0x7e, 0x0b, 0x0b, 0x7e, 0x7c, 0x00,
    0x00, 0x7f, 0x7f, 0x49, 0x49, 0x7f, 0x36, 0x00,
    0x00, 0x3e, 0x7f, 0x41, 0x41, 0x63, 0x22, 0x00,
    0x00, 0x7f, 0x7f, 0x41, 0x63, 0x3e, 0x1c, 0x00,
    0x00, 0x7f, 0x7f, 0x49, 0x49, 0x41, 0x41, 0x00,
    0x00, 0x7f, 0x7f, 0x09, 0x09, 0x01, 0x01, 0x00,
    0x00, 0x3e, 0x7f, 0x41, 0x49, 0x7b, 0x3a, 0x00,
    0x00, 0x7f, 0x7f, 0x08, 0x08, 0x7f, 0x7f, 0x00,
    0x00, 0x00, 0x41, 0x7f, 0x7f, 0x41, 0x00, 0x00,
    0x00, 0x20, 0x60, 0x41, 0x7f, 0x3f, 0x01, 0x00,
    0x00, 0x7f, 0x7f, 0x1c, 0x36, 0x63, 0x41, 0x00,
    0x00, 0x7f, 0x7f, 0x40, 0x40, 0x40, 0x40, 0x00,
    0x00, 0x7f, 0x7f, 0x06, 0x0c, 0x06, 0x7f, 0x7f,
    0x00, 0x7f, 0x7f, 0x0e, 0x1c, 0x7f, 0x7f, 0x00,
    0x00, 0x3e, 0x7f, 0x41, 0x41, 0x7f, 0x3e, 0x00,
    0x00, 0x7f, 0x7f, 0x09, 0x09, 0x0f, 0x06, 0x00,
    0x00, 0x1e, 0x3f, 0x21, 0x61, 0x7f, 0x5e, 0x00,
    0x00, 0x7f, 0x7f, 0x19, 0x39, 0x6f, 0x46, 0x00,
    0x00, 0x26, 0x6f, 0x49, 0x49, 0x7b, 0x32, 0x00,
    0x00, 0x01, 0x01, 0x7f, 0x7f, 0x01, 0x01, 0x00,
    0x00, 0x3f, 0x7f, 0x40, 0x40, 0x7f, 0x3f, 0x00,
    0x00, 0x1f, 0x3f, 0x60, 0x60, 0x3f, 0x1f, 0x00,
    0x00, 0x7f, 0x7f, 0x30, 0x18, 0x30, 0x7f, 0x7f,
    0x00, 0x63, 0x77, 0x1c, 0x1c, 0x77, 0x63, 0x00,
    0x00, 0x07, 0x0f, 0x78, 0x78, 0x0f, 0x07, 0x00,
    0x00, 0x61, 0x71, 0x59, 0x4d, 0x47, 0x43, 0x00,
    0x00, 0x00, 0x7f, 0x7f, 0x41, 0x41, 0x00, 0x00,
    0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x40, 0x00,
    0x00, 0x00, 0x41, 0x41, 0x7f, 0x7f, 0x00, 0x00,
    0x00, 0x18, 0x0c, 0x06, 0x06, 0x0c, 0x18, 0x00,
    0x00, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00,
    0x00, 0x00, 0x01, 0x03, 0x06, 0x04, 0x00, 0x00,
    0x00, 0x20, 0x74, 0x54, 0x54, 0x7c, 0x78, 0x00,
    0x00, 0x7e, 0x7e, 0x48, 0x48, 0x78, 0x30, 0x00,
    0x00, 0x38, 0x7c, 0x44, 0x44, 0x44, 0x00, 0x00,
    0x00, 0x30, 0x78, 0x48, 0x48, 0x7e, 0x7e, 0x00,
    0x00, 0x38, 0x7c, 0x54, 0x54, 0x5c, 0x18, 0x00,
    0x00, 0x00, 0x08, 0x7c, 0x7e, 0x0a, 0x0a, 0x00,
    0x00, 0x98, 0xbc, 0xa4, 0xa4, 0xfc, 0x7c, 0x00,
    0x00, 0x7e, 0x7e, 0x08, 0x08, 0x78, 0x70, 0x00,
    0x00, 0x00, 0x48, 0x7a, 0x7a, 0x40, 0x00, 0x00,
    0x00, 0x00, 0x80, 0x80, 0x80, 0xfa, 0x7a, 0x00,
    0x00, 0x7e, 0x7e, 0x10, 0x38, 0x68, 0x40, 0x00,
    0x00, 0x00, 0x42, 0x7e, 0x7e, 0x40, 0x00, 0x00,
    0x00, 0x7c, 0x7c, 0x18, 0x38, 0x1c, 0x7c, 0x78,
    0x00, 0x7c, 0x7c, 0x04, 0x04, 0x7c, 0x78, 0x00,
    0x00, 0x38, 0x7c, 0x44, 0x44, 0x7c, 0x38, 0x00,
    0x00, 0xfc, 0xfc, 0x24, 0x24, 0x3c, 0x18, 0x00,
    0x00, 0x18, 0x3c, 0x24, 0x24, 0xfc, 0xfc, 0x00,
    0x00, 0x7c, 0x7c, 0x04, 0x04, 0x0c, 0x08, 0x00,
    0x00, 0x48, 0x5c, 0x54, 0x54, 0x74, 0x24, 0x00,
    0x00, 0x04, 0x04, 0x3e, 0x7e, 0x44, 0x44, 0x00,
    0x00, 0x3c, 0x7c, 0x40, 0x40, 0x7c, 0x7c, 0x00,
    0x00, 0x1c, 0x3c, 0x60, 0x60, 0x3c, 0x1c, 0x00,
    0x00, 0x1c, 0x7c, 0x70, 0x38, 0x70, 0x7c, 0x1c,
    0x00, 0x44, 0x6c, 0x38, 0x38, 0x6c, 0x44, 0x00,
    0x00, 0x9c, 0xbc, 0xa0, 0xe0, 0x7c, 0x3c, 0x00,
    0x00, 0x44, 0x64, 0x74, 0x5c, 0x4c, 0x44, 0x00,
    0x00, 0x08, 0x3e, 0x77, 0x41, 0x41, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x7f, 0x7f, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x41, 0x41, 0x77, 0x3e, 0x08, 0x00,
    0x18, 0x0c, 0x0c, 0x1c, 0x18, 0x18, 0x0c, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

int main(int argc, char *argv[])
{
    string text;

    if (argc == 1) // Read the text from stdin if there was none provided as arguments.
    {
        cout << "Enter text to convert: ";
        getline(cin, text);
    }
    else // Read the text from arguments if there were any provided. If multiple, join with a space between them.
    {
        for (int i = 1; i < argc; i++)
        {
            text += argv[i];
            if (i != argc - 1)
            {
                text += " ";
            }
        }
    }

    cout << "const int kBitmapScrollLimit = " << (text.length() * 8) << ";" << endl // Print out the variables and generate the array.
         << "const unsigned char kBitmapScrollArray[" << (text.length() * 8) << "] PROGMEM = {" << endl;
    cout << hex;
    for (int i = 0; i < text.length(); i++) // Loop through all characters.
    {
        cout << "    ";
        int character_location = text.at(i) - ' '; // Print out all the bytes for a given character.
        for (int j = 0; j < 8; j++)
        {
            cout << "0x";
            if (kModifiedCommodore64Font[character_location * 8 + j] < 0x10)
            {
                cout << "0";
            }
            cout << kModifiedCommodore64Font[character_location * 8 + j];
            if (j != 7)
            {
                cout << ", ";
            }
        }
        if (i != text.length() - 1)
        {
            cout << ", " << endl;
        }
    }
    cout << "};" << endl;

    return 0;
}